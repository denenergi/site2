*,
*::before,
*::after {
	box-sizing: border-box;
}

/* Убираем внутренние отступы */

ul[class],
ol[class] {
	padding: 0;
}

/* Убираем внешние отступы */

body,
h1,
h2,
h3,
h4,
p,
ul[class],
ol[class],
li,
figure,
figcaption,
blockquote,
dl,
dd {
	margin: 0;
}

/* Выставляем основные настройки по-умолчанию для body */

body {
	min-height: 100vh;
	scroll-behavior: smooth;
	text-rendering: optimizeSpeed;
	line-height: 1.5;
}

/* Удаляем стандартную стилизацию для всех ul и il, у которых есть атрибут class*/

ul[class],
ol[class] {
	list-style: none;
}

/* Элементы a, у которых нет класса, сбрасываем до дефолтных стилей */

a:not([class]) {
	-webkit-text-decoration-skip: ink;
	text-decoration-skip-ink: auto;
}

/* Упрощаем работу с изображениями */

img {
	max-width: 100%;
	display: block;
}

/* Указываем понятную периодичность в потоке данных у article*/

article > * + * {
	margin-top: 1em;
}

/* Наследуем шрифты для инпутов и кнопок */

input,
button,
textarea,
select {
	font: inherit;
}

/* Удаляем все анимации и переходы для людей, которые предпочитай их не использовать */

/* lesson-3-1-1 Statr*/

.fourth {
	background: #ECEEEF;
	padding: 100px 100px;
	display: flex;
	flex-direction: column;
}

.fourth__title {
	text-align: center;
	font: normal normal bold 40px/100px 'Merriweather';
	letter-spacing: 0.8px;
	color: black;
	opacity: 1;
	margin: 0px 0px;
	padding-bottom: 100px;
}

.fourth__button {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 60px;
	width: 300px;
	border-radius: 50px;
	border: 2px solid transparent;
	background-color: #FFC56E;
	font: normal normal bold 18px/100px 'Merriweather';
	letter-spacing: 0.36px;
	color: #000000;
	opacity: 1;
	background-color: #04336D;
	color: white;
	align-self: center;
}

.fourth__button:focus,
.fourth__button:hover {
	background-color: rgba(255, 197, 110, 0);
	border: 2px solid #04336D;
	color: black;
	transition: all 500ms;
}

.comments {
	display: flex;
	justify-content: space-between;
	padding-bottom: 50px;
	width: 100%;
}

.comments__content {
	width: 25%;
	position: relative;
	background-color: white;
	border-radius: 20px;
	margin-right: 40px;
	padding: 60px 0px 10px 10px;
}

.comments__content:last-child {
	margin-right: 0px;
}

.comments__image {
	border-radius: 10px;
	display: block;
	width: 80px;
	height: 80px;
	position: absolute;
	top: -30px;
	left: -20px;
}

.comments__title {
	font: normal normal bold 16px/46px Merriweather;
	letter-spacing: 0.2px;
	margin: 0px 0px;
	padding-bottom: 5px;
}

.comments__description {
	font: normal normal 300 16px/25px Merriweather;
	letter-spacing: 0.2px;
}

@media (prefers-reduced-motion: reduce) {

* {
	-webkit-animation-duration: 0.01ms !important;
	animation-duration: 0.01ms !important;
	-webkit-animation-iteration-count: 1 !important;
	animation-iteration-count: 1 !important;
	transition-duration: 0.01ms !important;
	scroll-behavior: auto !important;
}

}

@media (max-width: 1024px) {

.fourth {
	padding: 60px 40px;
}

.fourth__title {
	font: normal normal bold 32px/60px Merriweather;
	padding-bottom: 70px;
}

.fourth__button {
	width: 250px;
	height: 50px;
	font: normal normal bold 15px/78px Merriweather;
}

.comments__content {
	margin-right: 30px;
}

.comments__image {
	width: 60px;
	height: 60px;
	top: -20px;
	left: -15px;
}

.comments__title {
	font: normal normal bold 13px/20px Merriweather;
}

.comments__description {
	font: normal normal 300 13px/18px Merriweather;
}

}

@media (max-width: 768px) {

.comments {
	flex-wrap: wrap;
}

.comments__content:nth-child(2n) {
	margin-right: 0px;
}

.comments__content {
	width: 45%;
	margin-bottom: 25px;
	margin-right: 20px;
}

}

@media (max-width: 480px) {

.fourth {
	padding: 40px 40px;
}

.fourth__title {
	font: normal normal bold 18px/25px Merriweather;
	padding-bottom: 40px;
}

.fourth__button {
	font: normal normal bold 12px/47px Merriweather;
	width: 200px;
	height: 40px;
}

.comments__content:last-child {
	margin-bottom: 0px;
}

.comments__content {
	width: 100%;
	margin-bottom: 30px;
	margin-right: 0px;
}

}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
